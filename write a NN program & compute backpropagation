import numpy as np

# Activation function and its derivative (sigmoid) 
def sigmoid(x):
  return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x): 
  return x * (1-x)

# Neural Network class
class Neural Network:
  def __init__(self, input_size, hidden_size, output_size, learning_rate=0.1):
    # Initialize weights and biases
    self.learning_rate = learning_rate
    self.weights_input_hidden = np.random.rand(input_size, hidden_size)
    self.weights_hidden_output = np.random.rand(hidden_size, output_size)
    self.bias_hidden = np.random.rand(1, hidden_size) 
    self.bias_output = np.random.rand(1, output_size)

  def forward(self, inputs):
    # Forward pass
    self.input = inputs
    self.hidden_layer_input = np.dot(self.input, self.weights_input_hidden) + self.bias_hidden
    self.hidden_layer_output = sigmoid(self.hidden_layer_input)
    self.output_layer_input = np.dot(self.hidden_layer_output, self.weights_hidden_output) + self.bias_output
    self.output = sigmoid(self.output_layer_input) 
    return self.output

  def backpropagation(self, target_output): 
    # Calculate error
    output_error = target_output - self.output
    d_output = output_error * sigmoid_derivative(self.output)

    # Hidden layer error
    hidden_error = d_output.dot(self.weights_hidden_output.T) 
    d_hidden = hidden_error* sigmoid_derivative(self.hidden_layer_output)

    # Update weights and biases 
    self.weights_hidden_output += self.hidden_layer_output.T.dot(d_output) * self.learning_rate self.weights_input_hidden += self.input.T.dot(d_hidden) * self.learning_rate
    self.bias_output += np.sum(d_output, axis=0, keepdims=True) * self.learning_rate
    self.bias_hidden += np.sum(d_hidden, axis=0, keepdims=True) self.learning_rate

  def train(self, inputs, target_output, epochs=10000): 
    for epoch in range(epochs):
      self.forward(inputs)
      self.backpropagation (target_output)


# Example usage
if __name__ == "____main___": 
  # XOR problem
  inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]]) 
  target_output = np.array([[0], [1], [1], [0]])

  # Initialize and train the neural network
  nn = Neural Network(input_size=2, hidden_size=2, output_size=1, learning_rate=0.1)
  nn.train(inputs, target_output)

  # Test the network
  for x in inputs:
    print(f"Input: {x} Output: {nn.forward(x)}")
