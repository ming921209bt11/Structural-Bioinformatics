import numpy as np
from Bio.Align import substitution_matrices

# Load BLOSUM62 matrix
blosum62 = substitution_matrices.load("BLOSUM62")
gap_penalty = -10 # Define gap penalty

def needleman_wunsch(seq1, seq2):
  # Initialize the DP matrix
  n = len(seq1)
  m = len(seq2)
  dp = np.zeros((n + 1, m + 1)) # DP matrix to store scores
  traceback = np.zeros((n + 1, m + 1), dtype="U1") # Matrix to store the direction for traceback

  # Initialize DP matrix with gap penalties for first row and column
  for i in range(1, n + 1):
    dp[i][0] = gap_penalty * i
    traceback[i][0] = 'U' # Up, meaning a gap in seq2
  for j in range(1, m + 1):
    dp[0][j] = gap_penalty * j
    traceback[0][j] = 'L' # Left, meaning a gap in seq1

  # Fill the DP matrix
  for i in range(1, n + 1):
    for j in range(1, m + 1):
      match = dp[i - 1][j - 1] + blosum62[seq1[i - 1], seq2[j - 1]]
      delete = dp[i - 1][j] + gap_penalty
      insert = dp[i][j - 1] + gap_penalty
      dp[i][j] = max(match, delete, insert)

      # Traceback: Store the direction of the best move
      if dp[i][j] == match:
        traceback[i][j] = 'D' # Diagonal, meaning match/mismatch
      elif dp[i][j] == delete:
        traceback[i][j] = 'U' # Up, meaning a gap in seq2
      else:
        traceback[i][j] = 'L' # Left, meaning a gap in seq1

# Traceback to find the alignment
align1, align2 = "", ""
i, j = n, m

while i > 0 or j > 0:
  if traceback[i][j] == 'D':
    align1 += seq1[i - 1]
    align2 += seq2[j - 1]
    i -= 1
    j -= 1
  elif traceback[i][j] == 'U':
    align1 += seq1[i - 1]
    align2 += "-"
    i -= 1
  elif traceback[i][j] == 'L':
    align1 += "-"
    align2 += seq2[j - 1]
    j -= 1

# Since we traceback from the end, we need to reverse the strings
align1 = align1[::-1]
align2 = align2[::-1]

return dp[n][m], align1, align2

# Main function to test
def main():
  seq1 = "MELVSE"
  seq2 = "MEIVSE"

  score, alignment1, alignment2 = needleman_wunsch(seq1, seq2)
  print("Optimal alignment score:", score)
  print("Sequence 1 alignment:", alignment1)
  print("Sequence 2 alignment:", alignment2)

# Run the main function
if __name__ == "__main__":
  main()
